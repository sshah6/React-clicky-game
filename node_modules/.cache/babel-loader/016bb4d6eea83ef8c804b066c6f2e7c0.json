{"ast":null,"code":"import _classCallCheck from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/saidshah/Desktop/untitled folder/myapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/saidshah/Desktop/untitled folder/myapp/src/App.js\";\nimport React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\"; // import the cards from a json list with image links\n\nimport cards from \"./cards.json\"; // create constructor from the cards and set the initial scores to 0\n// topScore is the most cards clicked without duplicating\n// currentScore is the most clicked this round, and resets to 0 when duplicating clicks\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      cards: cards,\n      topScore: 0,\n      currentScore: 0\n    };\n    _this.checkIfClicked = _this.checkIfClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // check if a card has been clicked\n\n\n  _createClass(App, [{\n    key: \"checkIfClicked\",\n    value: function checkIfClicked(id) {\n      // create a copy of the cards and use a random method to sort the array\n      var clickedCard = this.state.cards.filter(function (card) {\n        return card.id === id;\n      })[0];\n      var cardsCopy = this.state.cards.slice().sort(function (a, b) {\n        return 0.5 - Math.random();\n      }); // if a card has not been clicked, set its clicked state to true\n\n      if (!clickedCard.clicked) {\n        clickedCard.clicked = true;\n        cardsCopy[cardsCopy.findIndex(function (card) {\n          return card.id === id;\n        })] = clickedCard; // set the state and increment the counter\n\n        this.setState({\n          cards: cardsCopy,\n          currentScore: this.state.currentScore + 1,\n          topScore: this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore\n        });\n      } // if a card has been clicked already, then set its click to false and reset the game\n      else {\n          var resetCardsCopy = cardsCopy.map(function (card) {\n            return {\n              id: card.id,\n              image: card.image,\n              clicked: false\n            };\n          });\n          this.setState({\n            cards: resetCardsCopy,\n            currentScore: 0\n          });\n        }\n    } // render the header, score, wrapper, and footer on the page using the current state values\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentScore: this.state.currentScore,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          checkIfClicked: _this2.checkIfClicked,\n          id: card.id,\n          key: card.id,\n          image: card.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/saidshah/Desktop/untitled folder/myapp/src/App.js"],"names":["React","Component","Card","Wrapper","Header","Footer","cards","App","props","state","topScore","currentScore","checkIfClicked","bind","id","clickedCard","filter","card","cardsCopy","slice","sort","a","b","Math","random","clicked","findIndex","setState","resetCardsCopy","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n// import the cards from a json list with image links\nimport cards from \"./cards.json\";\n\n// create constructor from the cards and set the initial scores to 0\n// topScore is the most cards clicked without duplicating\n// currentScore is the most clicked this round, and resets to 0 when duplicating clicks\nclass App extends Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: cards,\n      topScore: 0,\n      currentScore: 0,\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n  \n  // check if a card has been clicked\n  checkIfClicked(id) {\n    // create a copy of the cards and use a random method to sort the array\n    let clickedCard = this.state.cards.filter(card => card.id === id)[0];\n    let cardsCopy = this.state.cards.slice().sort(function(a, b){return 0.5 - Math.random()});\n    // if a card has not been clicked, set its clicked state to true\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      cardsCopy[cardsCopy.findIndex((card) => card.id === id)] = clickedCard;\n      \n      // set the state and increment the counter\n      this.setState({\n        cards: cardsCopy,\n        currentScore: this.state.currentScore + 1,\n        topScore: (this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore),\n      });\n    }\n    \n    // if a card has been clicked already, then set its click to false and reset the game\n    else {\n      \n      let resetCardsCopy = cardsCopy.map((card) => {\n        return {\n          id: card.id,\n          image: card.image,\n          clicked: false,\n        }\n      });\n      this.setState({\n        cards: resetCardsCopy,\n        currentScore: 0,\n      });\n    } \n  }\n  \n  // render the header, score, wrapper, and footer on the page using the current state values\n  render() {\n    return (\n      <div className=\"container\">\n        <Header currentScore={this.state.currentScore} topScore={this.state.topScore}/>\n        <Wrapper>  \n          {this.state.cards.map(card => (\n            <Card\n              checkIfClicked={this.checkIfClicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n              />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}